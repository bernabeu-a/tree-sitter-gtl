%
let a := @( 1, 2, 3, 4 )
display a

let b := a
display b

println a == b

let b := @( 1, 2, 3, 4 )
display b

println a == b

let b += 5
display b

println a == b

let b := @( 1, 2, 3, 5 )
display b

println a == b

let b := b | b
display b

let b := b + b
display b

let b |= a
display b

let myList := @(
  @{
    age : 18,
    height : 180,
    name : "Arnold"
  },
  @{
    age : 22,
    height : 170,
    name : "Bob"
  },
  @{
    age : 29,
    height : 175,
    name : "John"
  }
)

let myMap := [myList mapBy : "name"]
display myMap

let ALARMS := @( @{ NAME: "alr1"}, @{ NAME: "alr1"} )

foreach alr in ALARMS
  before %
tpl_time_obj *tpl_alarm_table[ALARM_COUNT] = {
%
  do %  &% !alr::NAME %_alarm_desc%
  between %,
%
  after %
};
%
end foreach

let myEmptyList := @()
display myEmptyList

let myDeprecatedEmptyList := emptylist

let aList := @( 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 )
display aList
let aSecondList := [aList subListFrom: 4]
display aSecondList
let aSecondList := [aList subListFrom: 20]
display aSecondList
let aSecondList := [aList subListTo: 2]
display aSecondList
let aSecondList := [aList subListTo: 20]
display aSecondList
let aSecondList := [aList subList: 2, 5]
display aSecondList
let aSecondList := [aList subList: 2, 0]
display aSecondList
let aSecondList := [aList subList: 2, 20]
display aSecondList

[!aSecondList insert: 3, "Hello"]
display aSecondList
[!aSecondList insert: 3, @{ a: 3, b: 4} ]
display aSecondList

let aList := @( 1, 2, 3, 4 )
let subList := [aList subListTo: 1]
display subList
let subList := [aList subListFrom: 1]
display subList

let aBigList := listOfSize(20)
display aBigList
let aBigList[0] := "Hello"
display aBigList


let myList := @(
  @{ age : 18, height : 180, name : "Arnold" },
  @{ age : 22, height : 170, name : "Bob"    },
  @{ age : 29, height : 175, name : "John"   }
)

let mySet := [myList setBy: "height"]
display mySet

let myList := @( 1, 3, "Hello", 4, "World" )
let myString := [myList componentsJoinedByString: ", "]
println myString

